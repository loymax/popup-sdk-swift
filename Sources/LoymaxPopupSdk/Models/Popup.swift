//
// Popup.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class Popup: Codable, JSONEncodable, Hashable {

    public var popupId: Int64
    public var navlink: String
    public var action: String?
    public var content: PopupContent?
    public var style: PopupStyle?

    public init(popupId: Int64, navlink: String, action: String? = nil, content: PopupContent? = nil, style: PopupStyle? = nil) {
        self.popupId = popupId
        self.navlink = navlink
        self.action = action
        self.content = content
        self.style = style
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case popupId = "popup_id"
        case navlink = "navlink"
        case action = "action"
        case content = "content"
        case style = "style"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(popupId, forKey: .popupId)
        try container.encode(navlink, forKey: .navlink)
        try container.encodeIfPresent(action, forKey: .action)
        try container.encodeIfPresent(content, forKey: .content)
        try container.encodeIfPresent(style, forKey: .style)
    }

    public static func == (lhs: Popup, rhs: Popup) -> Bool {
        lhs.popupId == rhs.popupId &&
        lhs.navlink == rhs.navlink &&
        lhs.action == rhs.action &&
        lhs.content == rhs.content &&
        lhs.style == rhs.style
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(popupId.hashValue)
        hasher.combine(navlink.hashValue)
        hasher.combine(action?.hashValue)
        hasher.combine(content?.hashValue)
        hasher.combine(style?.hashValue)
    }
}
