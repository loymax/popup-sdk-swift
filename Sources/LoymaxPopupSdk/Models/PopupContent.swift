//
// PopupContent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class PopupContent: Codable, JSONEncodable, Hashable {

    public var title: String?
    public var subtitle: String?
    public var imageUrl: String?
    public var text: String?
    public var button: PopupContentButton?

    public init(title: String? = nil, subtitle: String? = nil, imageUrl: String? = nil, text: String? = nil, button: PopupContentButton? = nil) {
        self.title = title
        self.subtitle = subtitle
        self.imageUrl = imageUrl
        self.text = text
        self.button = button
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case title
        case subtitle
        case imageUrl = "image_url"
        case text
        case button
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(subtitle, forKey: .subtitle)
        try container.encodeIfPresent(imageUrl, forKey: .imageUrl)
        try container.encodeIfPresent(text, forKey: .text)
        try container.encodeIfPresent(button, forKey: .button)
    }

    public static func == (lhs: PopupContent, rhs: PopupContent) -> Bool {
        lhs.title == rhs.title &&
        lhs.subtitle == rhs.subtitle &&
        lhs.imageUrl == rhs.imageUrl &&
        lhs.text == rhs.text &&
        lhs.button == rhs.button
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(title?.hashValue)
        hasher.combine(subtitle?.hashValue)
        hasher.combine(imageUrl?.hashValue)
        hasher.combine(text?.hashValue)
        hasher.combine(button?.hashValue)
    }
}
