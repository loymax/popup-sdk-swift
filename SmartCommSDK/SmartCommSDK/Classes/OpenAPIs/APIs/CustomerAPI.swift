//
// CustomerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

extension SmartCommSDKAPI {


open class CustomerAPI {

    /**
     Передать в Смарт полученный от APNS/FCM/rustore/HuaweiPushToolkit токен
     
     - parameter id: (path) Внешний идентификатор клиента (client_external_id) 
     - parameter addCustomerContactTokenRequest: (body) Тело запроса должно содрежать массив контактных данных, где &#x60;type&#x60; и &#x60;value&#x60; обязательные (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addCustomerContactToken(id: String, addCustomerContactTokenRequest: AddCustomerContactTokenRequest? = nil, apiResponseQueue: DispatchQueue = SmartCommSDKAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return addCustomerContactTokenWithRequestBuilder(id: id, addCustomerContactTokenRequest: addCustomerContactTokenRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Передать в Смарт полученный от APNS/FCM/rustore/HuaweiPushToolkit токен
     - POST /customer/{id}/contact
     - Вставить контактные данные клиента
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter id: (path) Внешний идентификатор клиента (client_external_id) 
     - parameter addCustomerContactTokenRequest: (body) Тело запроса должно содрежать массив контактных данных, где &#x60;type&#x60; и &#x60;value&#x60; обязательные (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func addCustomerContactTokenWithRequestBuilder(id: String, addCustomerContactTokenRequest: AddCustomerContactTokenRequest? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/customer/{id}/contact"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = SmartCommSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addCustomerContactTokenRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = SmartCommSDKAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Получить из Смарта статус разрешения на уведомления клиенту
     
     - parameter id: (path) Внешний идентификатор клиента (client_external_id) 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCustomerNotificationStatus(id: String, apiResponseQueue: DispatchQueue = SmartCommSDKAPI.apiResponseQueue, completion: @escaping ((_ data: GetCustomerNotificationStatus200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getCustomerNotificationStatusWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить из Смарта статус разрешения на уведомления клиенту
     - GET /customer/{id}/channel
     - Возвращает разрешения на уведомления клиенту
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter id: (path) Внешний идентификатор клиента (client_external_id) 
     - returns: RequestBuilder<GetCustomerNotificationStatus200Response> 
     */
    open class func getCustomerNotificationStatusWithRequestBuilder(id: String) -> RequestBuilder<GetCustomerNotificationStatus200Response> {
        var localVariablePath = "/customer/{id}/channel"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = SmartCommSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetCustomerNotificationStatus200Response>.Type = SmartCommSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Получить из Смарта статус подписки клиента на категории рассылок
     
     - parameter id: (path) Внешний идентификатор клиента (client_external_id) 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCustomerSubscriptionCategories(id: String, apiResponseQueue: DispatchQueue = SmartCommSDKAPI.apiResponseQueue, completion: @escaping ((_ data: GetCustomerSubscriptionCategories200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getCustomerSubscriptionCategoriesWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить из Смарта статус подписки клиента на категории рассылок
     - GET /customer/{id}/subscribe
     - Внимание! Если клиент не подписан на какую-либо из категорий - она не будет отображаться                (`data.attributes` динамическое).                В случае полного отсутствия подписок у клиента - вернется пустой массив `attributes`
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter id: (path) Внешний идентификатор клиента (client_external_id) 
     - returns: RequestBuilder<GetCustomerSubscriptionCategories200Response> 
     */
    open class func getCustomerSubscriptionCategoriesWithRequestBuilder(id: String) -> RequestBuilder<GetCustomerSubscriptionCategories200Response> {
        var localVariablePath = "/customer/{id}/subscribe"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = SmartCommSDKAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetCustomerSubscriptionCategories200Response>.Type = SmartCommSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Передать в Смарт статус подписки на категории
     
     - parameter id: (path) Внешний идентификатор клиента (client_external_id) 
     - parameter modifyCustomerSubscriptionCategoriesRequest: (body) В `categories` передаются одна или более категорий рассылок, содержащей пары ключ-значение,                    где ключ - это код категории рассылки (`mailingCode`), а значение - это объект, содержащий пары ключ-значение, где                    ключ - это тип массовых рассылок, а значение - статус подписки (`Y` - подписан, `N` - отписан, `ND` - удалить из категории) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func modifyCustomerSubscriptionCategories(id: String, modifyCustomerSubscriptionCategoriesRequest: ModifyCustomerSubscriptionCategoriesRequest? = nil, apiResponseQueue: DispatchQueue = SmartCommSDKAPI.apiResponseQueue, completion: @escaping ((_ data: SetCustomerNotificationStatus200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return modifyCustomerSubscriptionCategoriesWithRequestBuilder(id: id, modifyCustomerSubscriptionCategoriesRequest: modifyCustomerSubscriptionCategoriesRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Передать в Смарт статус подписки на категории
     - PATCH /customer/{id}/subscribe
     - 
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter id: (path) Внешний идентификатор клиента (client_external_id) 
     - parameter modifyCustomerSubscriptionCategoriesRequest: (body) В `categories` передаются одна или более категорий рассылок, содержащей пары ключ-значение,                    где ключ - это код категории рассылки (`mailingCode`), а значение - это объект, содержащий пары ключ-значение, где                    ключ - это тип массовых рассылок, а значение - статус подписки (`Y` - подписан, `N` - отписан, `ND` - удалить из категории) (optional)
     - returns: RequestBuilder<SetCustomerNotificationStatus200Response>
     */
    open class func modifyCustomerSubscriptionCategoriesWithRequestBuilder(id: String, modifyCustomerSubscriptionCategoriesRequest: ModifyCustomerSubscriptionCategoriesRequest? = nil) -> RequestBuilder<SetCustomerNotificationStatus200Response> {
        var localVariablePath = "/customer/{id}/subscribe"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = SmartCommSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: modifyCustomerSubscriptionCategoriesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SetCustomerNotificationStatus200Response>.Type = SmartCommSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Передать в Смарт статус разрешения на уведомления клиенту
     
     - parameter id: (path) Внешний идентификатор клиента (client_external_id) 
     - parameter setCustomerNotificationStatusRequest: (body) Атрибут должен содрежать пары ключ-значение, где ключ - это тип канала коммуникации,                    а значение - это статус разрешения на уведомления клиенту (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func setCustomerNotificationStatus(id: String, setCustomerNotificationStatusRequest: SetCustomerNotificationStatusRequest? = nil, apiResponseQueue: DispatchQueue = SmartCommSDKAPI.apiResponseQueue, completion: @escaping ((_ data: SetCustomerNotificationStatus200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return setCustomerNotificationStatusWithRequestBuilder(id: id, setCustomerNotificationStatusRequest: setCustomerNotificationStatusRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Передать в Смарт статус разрешения на уведомления клиенту
     - POST /customer/{id}/channel
     - Изменить/добавить подписки клиента на каналы коммуникаций
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter id: (path) Внешний идентификатор клиента (client_external_id) 
     - parameter setCustomerNotificationStatusRequest: (body) Атрибут должен содрежать пары ключ-значение, где ключ - это тип канала коммуникации,                    а значение - это статус разрешения на уведомления клиенту (optional)
     - returns: RequestBuilder<SetCustomerNotificationStatus200Response> 
     */
    open class func setCustomerNotificationStatusWithRequestBuilder(id: String, setCustomerNotificationStatusRequest: SetCustomerNotificationStatusRequest? = nil) -> RequestBuilder<SetCustomerNotificationStatus200Response> {
        var localVariablePath = "/customer/{id}/channel"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = SmartCommSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setCustomerNotificationStatusRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SetCustomerNotificationStatus200Response>.Type = SmartCommSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
}
