//
// CommunicationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

extension SmartCommSDKAPI {


open class CommunicationAPI {

    /**
     Передать в Смарт факт показа (открытия) пуша
     
     - parameter type: (path) Тип коммуникации (email/sms/push/bot) 
     - parameter logPushEventRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func logPushEvent(type: String, logPushEventRequest: LogPushEventRequest? = nil, apiResponseQueue: DispatchQueue = SmartCommSDKAPI.apiResponseQueue, completion: @escaping ((_ data: LogPushEvent200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return logPushEventWithRequestBuilder(type: type, logPushEventRequest: logPushEventRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Передать в Смарт факт показа (открытия) пуша
     - POST /communication/{type}/events
     - Передать факт показа (открытия) пуша
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter type: (path) Тип коммуникации (email/sms/push/bot) 
     - parameter logPushEventRequest: (body)  (optional)
     - returns: RequestBuilder<LogPushEvent200Response> 
     */
    open class func logPushEventWithRequestBuilder(type: String, logPushEventRequest: LogPushEventRequest? = nil) -> RequestBuilder<LogPushEvent200Response> {
        var localVariablePath = "/communication/{type}/events"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = SmartCommSDKAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: logPushEventRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LogPushEvent200Response>.Type = SmartCommSDKAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
}
