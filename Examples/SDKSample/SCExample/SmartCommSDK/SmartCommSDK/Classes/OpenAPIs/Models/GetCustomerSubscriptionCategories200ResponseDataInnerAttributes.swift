//
// GetCustomerSubscriptionCategories200ResponseDataInnerAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@available(*, deprecated, renamed: "SmartCommSDKAPI.GetCustomerSubscriptionCategories200ResponseDataInnerAttributes")
public typealias GetCustomerSubscriptionCategories200ResponseDataInnerAttributes = SmartCommSDKAPI.GetCustomerSubscriptionCategories200ResponseDataInnerAttributes

extension SmartCommSDKAPI {

public struct GetCustomerSubscriptionCategories200ResponseDataInnerAttributes: Codable, JSONEncodable, Hashable {

    public var id: Int?
    public var mailingCatId: Int?
    public var name: String?
    public var description: String?
    public var statusEmail: String?
    public var statusPush: String?
    public var statusSms: String?

    public init(id: Int? = nil, mailingCatId: Int? = nil, name: String? = nil, description: String? = nil, statusEmail: String? = nil, statusPush: String? = nil, statusSms: String? = nil) {
        self.id = id
        self.mailingCatId = mailingCatId
        self.name = name
        self.description = description
        self.statusEmail = statusEmail
        self.statusPush = statusPush
        self.statusSms = statusSms
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case mailingCatId = "mailing_cat_id"
        case name
        case description
        case statusEmail = "status_email"
        case statusPush = "status_push"
        case statusSms = "status_sms"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(mailingCatId, forKey: .mailingCatId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(statusEmail, forKey: .statusEmail)
        try container.encodeIfPresent(statusPush, forKey: .statusPush)
        try container.encodeIfPresent(statusSms, forKey: .statusSms)
    }
}

}
